import { Context } from 'telegraf';
import { storage } from './storage';
import { updateUserSubscriptionStatus } from './subscriptionChecker';
import { getDefectPhotosAll } from "./storage";
import { sendLeadEmail } from "./mailer";
import { Markup } from "telegraf";

import {
  setFlowState, getFlowState, clearFlowState,
  getLeadData, setLeadData, clearLeadData
} from "./leadFlow";

import {
  getDefectByHumanId,
  addDefectPhotosBulk,
  updateDefectStatusByHumanId,
  getDefectWithCountsByHumanId,
  assignDefect,
  assignDefectByHumanId,         // ‚Üê –Ω–æ–≤–æ–µ –∏–º—è
  setDefectDueDateByHumanId,
} from "./storage";
import { getAfterMode } from "./afterMode";
// –õ–æ–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –Ω–æ–≤—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (–Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å —á—É–∂–∏–º–∏ reportError)
function defReportError(ctx: Context, where: string, err: unknown) {
  try { console.error(`[defect-master][${where}]`, err); } catch {}
  try { ctx.reply("üôà –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."); } catch {}
}

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à —Ä–µ–∂–∏–º–∞ ¬´–ø–æ—Å–ª–µ¬ª
const afterMode = new Map<number, { defectId: number; startedAt: number }>();
const AFTER_TTL_MS = 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç

function clearAfterMode(userId: number) {
  afterMode.delete(userId);
}

function setAfterMode(userId: number, defectId: number) {
  afterMode.set(userId, { defectId, startedAt: Date.now() });
}

function getActiveAfter(userId: number) {
  const s = afterMode.get(userId);
  if (!s) return null;
  if (Date.now() - s.startedAt > AFTER_TTL_MS) {
    afterMode.delete(userId);
    return null;
  }
  return s;
}

function chunk<T>(arr: T[], size: number): T[][] {
  const out: T[][] = [];
  for (let i = 0; i < arr.length; i += size) out.push(arr.slice(i, i + size));
  return out;
}

const RE_ID = /\b#?(D-\d{6})\b/i;
const RE_FIXED_CAPTION = /\b(—É—Å—Ç—Ä–∞–Ω–µ–Ω[–æ–∞]?|–∑–∞–∫—Ä—ã—Ç[–æ–∞]?|fixed)\b.*\b#?(D-\d{6})\b/i;
export const controlKeyFor = (uid: number | string) => `control_wizard_${uid}`;

// —Ö–µ–ª–ø–µ—Ä: –æ–∫—Ä—É–≥–ª–∏—Ç—å —Å—Ä–æ–∫ –∫ 23:59:59 –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è –∏ –≤–µ—Ä–Ω—É—Ç—å ISO (UTC)
function toISODateLocal(daysFromNow = 0) {
  const d = new Date();
  d.setHours(23, 59, 59, 0);
  d.setDate(d.getDate() + daysFromNow);
  return d.toISOString();
}

// —Å–ø—Ä–æ—Å–∏—Ç—å —Å—Ä–æ–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è
export async function askDue(ctx: Context, humanId: string) {
  await ctx.reply(
    `–°—Ä–æ–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è #${humanId}?`,
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "–°–µ–≥–æ–¥–Ω—è", callback_data: `def_due_today:${humanId}` },
            { text: "+1 –¥–µ–Ω—å",  callback_data: `def_due_p1:${humanId}` },
            { text: "+3 –¥–Ω—è",   callback_data: `def_due_p3:${humanId}` },
          ],
          [{ text: "üóì –°–≤–æ—è –¥–∞—Ç–∞", callback_data: `def_due_custom:${humanId}` }],
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞",     callback_data: `def_ctl_cancel:${humanId}` }],
        ],
      },
    }
  );
}

// –û—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –≥–æ–Ω–æ–∫
const photoLocks = new Map<number, Promise<void>>();
function runWithUserLock(userId: number, task: () => Promise<void>) {
  const prev = photoLocks.get(userId) ?? Promise.resolve();
  const next = prev.then(task).catch(() => {}).finally(() => {
    // –æ—á–∏—Å—Ç–∫–∞, –µ—Å–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–∏—Å –≤—Å—ë –µ—â—ë –ø–æ—Å–ª–µ–¥–Ω–∏–π
    if (photoLocks.get(userId) === next) photoLocks.delete(userId);
  });
  photoLocks.set(userId, next);
  return next;
}

// –î–µ–±–∞—É–Ω—Å–µ—Ä—ã
const albumTimers = new Map<string, NodeJS.Timeout>(); // `${userId}:${media_group_id}`
const singleTimers = new Map<number, NodeJS.Timeout>(); // –ø–æ userId

function clearDefectTimersFor(userId: number) {
  // –ß–∏—Å—Ç–∏–º –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ç–∞–π–º–µ—Ä
  const st = singleTimers.get(userId);
  if (st) {
    clearTimeout(st);
    singleTimers.delete(userId);
  }

  // –ß–∏—Å—Ç–∏–º –∞–ª—å–±–æ–º–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  albumTimers.forEach((t, key) => {
    if (key.startsWith(`${userId}:`)) {
      clearTimeout(t);
      albumTimers.delete(key);
    }
  });
}

export async function handleStart(ctx: Context) {
  // Only answer callback query if this is actually a callback query
  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }
  
  ctx.reply(
    'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NEMO Moscow.\n' +
    '–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è —Ä–µ–º–æ–Ω—Ç–æ–º –ø–æ–¥ –∫–ª—é—á, –∞–≤—Ç–æ—Ä—Å–∫–∏–º –Ω–∞–¥–∑–æ—Ä–æ–º –∏ –¥–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç–∞–º–∏.\n' +
    'üõ°Ô∏è –ò–ò-–¢–µ—Ö–Ω–∞–¥–∑–æ—Ä ‚Äî –ø–æ–ø—Ä–æ–±—É–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n' + 
    '–†–∞–±–æ—Ç–∞–µ–º —Å 2011 –≥–æ–¥–∞. –ü—Ä–æ–∑—Ä–∞—á–Ω–æ. –°—Ç–∏–ª—å–Ω–æ. –° –≥–∞—Ä–∞–Ω—Ç–∏–µ–π.',
    {
      reply_markup: {
      inline_keyboard: [
        [{ text: 'üèó –†–µ–º–æ–Ω—Ç –ø–æ–¥ –∫–ª—é—á', callback_data: 'renovation' }],
        [{ text: 'üõ°Ô∏è –ò–ò-–¢–µ—Ö–Ω–∞–¥–∑–æ—Ä',    callback_data: 'inspector' }],
        [{ text: 'üé® –ò–ò-–î–∏–∑–∞–π–Ω–µ—Ä',     callback_data: 'designer' }],
        [{ text: 'üì∏ –§–æ—Ç–æ—Ñ–∏–∫—Å–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–∞', callback_data: 'defect_start' }],
        [{ text: "üìã –ó–∞–¥–∞—á–∏", callback_data: "lists_menu" }],
        [{ text: 'üìë –û—Ç—á—ë—Ç—ã', callback_data: 'reports' }],
        [{ text: '‚ÑπÔ∏è –ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º', callback_data: 'how_we_work' }],
        [{ text: 'üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', callback_data: 'website' }, { text: 'üó∫ –ù–∞—à –æ—Ñ–∏—Å', callback_data: 'office' }],
        [{ text: '‚òéÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞', callback_data: 'leave_request' }],
      ]
      }
    }
  );
}

export async function handleSubscriptionCheck(ctx: Context) {
  await ctx.answerCbQuery();
  
  const user = (ctx as any).user;
  if (!user) return;

  const isSubscribed = await updateUserSubscriptionStatus(user.id, user.telegramId);
  
  if (isSubscribed) {
    ctx.reply(
      '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n' +
      '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ò–ò-–∞–≥–µ–Ω—Ç–∞–º–∏.\n\n' +
      'NEMO Moscow ‚Äî —Ä–µ–º–æ–Ω—Ç –ø–æ–¥ –∫–ª—é—á, –Ω–∞–¥–∑–æ—Ä –∏ –¥–∏–∑–∞–π–Ω —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π.',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üëÄ –ò–ò-–¢–µ—Ö–Ω–∞–¥–∑–æ—Ä', callback_data: 'inspector' }],
            [{ text: 'üé® –ò–ò-–î–∏–∑–∞–π–Ω–µ—Ä', callback_data: 'designer' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]
          ]
        }
      }
    );
  } else {
    ctx.reply(
      '‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞.\n' +
      '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @nemo_moscow_channel\n\n' +
      'NEMO Moscow ‚Äî —Ä–µ–º–æ–Ω—Ç –ø–æ–¥ –∫–ª—é—á, –Ω–∞–¥–∑–æ—Ä –∏ –¥–∏–∑–∞–π–Ω —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π.',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', callback_data: 'check_subscription' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]
          ]
        }
      }
    );
  }
}

export async function handleRenovation(ctx: Context) {
  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }
  
  ctx.reply(
    '–ú—ã –±–µ—Ä—ë–º –Ω–∞ —Å–µ–±—è –≤–µ—Å—å —Ü–∏–∫–ª —Ä–∞–±–æ—Ç ‚Äî –æ—Ç —á–µ—Ä–Ω–æ–≤–æ–π –æ—Ç–¥–µ–ª–∫–∏ –¥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–µ–±–ª–∏—Ä–æ–≤–∫–∏.\n' +
    '–°—Ä–æ–∫–∏ –æ—Ç 2 –º–µ—Å—è—Ü–µ–≤. –ì–∞—Ä–∞–Ω—Ç–∏—è 3 –≥–æ–¥–∞.\n\n' +
    'NEMO Moscow ‚Äî —Ä–µ–º–æ–Ω—Ç –ø–æ–¥ –∫–ª—é—á, –Ω–∞–¥–∑–æ—Ä –∏ –¥–∏–∑–∞–π–Ω —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π.',
    {
      reply_markup: {
        inline_keyboard: [
          // [{ text: '–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —Ä–µ–º–æ–Ω—Ç', callback_data: 'renovation_includes' }],
          [{ text: '–ö–∞–∫ –º—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ', callback_data: 'quality_control' }],
          [{ text: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞', callback_data: 'leave_request' }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]
        ]
      }
    }
  );
}

export async function handleInspector(ctx: Context) {
  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }
  
  const user = (ctx as any).user;
  const uid = ctx.from!.id;
  await storage.setBotSetting(`defect_draft_${uid}`, "");
  await storage.setBotSetting(afterKeyFor(uid), "");
  await storage.setBotSetting(`agent_state_${uid}`, JSON.stringify({ agent: "inspector" }));
  clearDefectTimersFor(uid);

  await ctx.reply("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –ò–ò-–¢–µ—Ö–Ω–∞–¥–∑–æ—Ä –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ–≥–æ.");

  if (!user) return;

  // Temporarily skip subscription check
  // const isSubscribed = await updateUserSubscriptionStatus(user.id, user.telegramId);
  // if (!isSubscribed) {
  //   ctx.reply(
  //     '–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ò–ò-–¢–µ—Ö–Ω–∞–¥–∑–æ—Ä–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n' +
  //     'üëâ @nemo_moscow_channel\n\n' +
  //     '–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.\n\n' +
  //     'NEMO Moscow ‚Äî —Ä–µ–º–æ–Ω—Ç –ø–æ–¥ –∫–ª—é—á, –Ω–∞–¥–∑–æ—Ä –∏ –¥–∏–∑–∞–π–Ω —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π.',
  //     {
  //       reply_markup: {
  //         inline_keyboard: [
  //           [{ text: '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', callback_data: 'check_subscription' }],
  //           [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]
  //         ]
  //       }
  //     }
  //   );
  //   return;
  // }

  // Check weekly limits
  const weeklyRequests = await storage.getUserWeeklyRequests(user.id, 'inspector');
  const totalLimit = 10 + user.totalPurchasedRequests;
  
  if (weeklyRequests >= totalLimit) {
    await ctx.reply(
      [
        "‚ö†Ô∏è –ù–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω.",
        "",
        "–ú–æ–∂–Ω–æ –¥–æ–∫—É–ø–∏—Ç—å –µ—â—ë 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Ç–µ—Ö–Ω–∞–¥–∑–æ—Ä–µ –∑–∞ 990 ‚ÇΩ.",
      ].join("\n"),
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–ö—É–ø–∏—Ç—å 10 —Ñ–æ—Ç–æ ‚Äî 990 ‚ÇΩ", callback_data: "buy_pack_10" }],
          ],
        },
      }
    );
    return;
  }

  // Set agent state for photo upload
  await storage.setBotSetting(`agent_state_${user.id}`, JSON.stringify({ agent: 'inspector' }));
  
  ctx.reply(
    'üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ 1 —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞.\n' +
    '–ò–ò-–¢–µ—Ö–Ω–∞–¥–∑–æ—Ä –æ—Ç–º–µ—Ç–∏—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–µ–¥–æ—á—ë—Ç—ã –∏ –¥–∞—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n' +
    '‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n' +
    '‚Äî 1 —Ñ–æ—Ç–æ –∑–∞ —Ä–∞–∑\n' +
    '‚Äî –¥–æ 10 –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –Ω–µ–¥–µ–ª—é\n\n' +
    `–û—Å—Ç–∞–µ—Ç—Å—è –ø–æ–ø—ã—Ç–æ–∫: ${totalLimit - weeklyRequests}\n\n` +
    'NEMO Moscow ‚Äî —Ä–µ–º–æ–Ω—Ç –ø–æ–¥ –∫–ª—é—á, –Ω–∞–¥–∑–æ—Ä –∏ –¥–∏–∑–∞–π–Ω —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π.',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]
        ]
      }
    }
  );
}

export async function handleDesigner(ctx: Context) {
  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }
  
  const user = (ctx as any).user;

  const uid = ctx.from!.id;
  await storage.setBotSetting(`defect_draft_${uid}`, "");
  await storage.setBotSetting(afterKeyFor(uid), "");
  await storage.setBotSetting(`agent_state_${uid}`, JSON.stringify({ agent: "designer" }));
  clearDefectTimersFor(uid);

  if (!user) return;

  // Temporarily skip subscription check
  // const isSubscribed = await updateUserSubscriptionStatus(user.id, user.telegramId);
  // if (!isSubscribed) {
  //   ctx.reply(
  //     '–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ò–ò-–î–∏–∑–∞–π–Ω–µ—Ä–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n' +
  //     'üëâ @nemo_moscow_channel\n\n' +
  //     '–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.\n\n' +
  //     'NEMO Moscow ‚Äî —Ä–µ–º–æ–Ω—Ç –ø–æ–¥ –∫–ª—é—á, –Ω–∞–¥–∑–æ—Ä –∏ –¥–∏–∑–∞–π–Ω —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π.',
  //     {
  //       reply_markup: {
  //         inline_keyboard: [
  //           [{ text: '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', callback_data: 'check_subscription' }],
  //           [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]
  //         ]
      //     }
  //   );
  //   return;
  // }

  // Check weekly limits
  const weeklyRequests = await storage.getUserWeeklyRequests(user.id, 'designer');
  const totalLimit = 1 + user.totalPurchasedRequests;
  
  if (weeklyRequests >= totalLimit) {
    await ctx.reply(
      [
        "‚ö†Ô∏è –ù–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω.",
        "",
        "–ú–æ–∂–Ω–æ –¥–æ–∫—É–ø–∏—Ç—å –µ—â—ë 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Ç–µ—Ö–Ω–∞–¥–∑–æ—Ä–µ –∑–∞ 990 ‚ÇΩ.",
      ].join("\n"),
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–ö—É–ø–∏—Ç—å 10 —Ñ–æ—Ç–æ ‚Äî 990 ‚ÇΩ", callback_data: "buy_pack_10" }],
          ],
        },
      }
    );
    return;
  }
  // Start design quiz
  ctx.reply(
    'üé® –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∫–æ–º–Ω–∞—Ç—ã.\n' +
    '–ò–ò-–î–∏–∑–∞–π–Ω–µ—Ä –ø–æ–∫–∞–∂–µ—Ç, –∫–∞–∫ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∏–Ω—Ç–µ—Ä—å–µ—Ä –≤ –Ω–æ–≤–æ–º —Å—Ç–∏–ª–µ.\n\n' +
    '‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n' +
    '‚Äî 1 —Ñ–æ—Ç–æ –∑–∞ —Ä–∞–∑\n' +
    '‚Äî –¥–æ 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –Ω–µ–¥–µ–ª—é\n\n' +
    `–û—Å—Ç–∞–µ—Ç—Å—è –ø–æ–ø—ã—Ç–æ–∫: ${totalLimit - weeklyRequests}\n\n` +
    '‚ùì –ö–∞–∫–æ–π —Å—Ç–∏–ª—å –≤–∞–º –±–ª–∏–∂–µ?',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º', callback_data: 'style_minimalism' }],
          [{ text: '–õ–æ—Ñ—Ç', callback_data: 'style_loft' }],
          [{ text: '–ö–ª–∞—Å—Å–∏–∫–∞', callback_data: 'style_classic' }],
          [{ text: '–°–∫–∞–Ω–¥–∏', callback_data: 'style_scandi' }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]
        ]
      }
    }
  );
}

export async function handleHowWeWork(ctx: Context) {
  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }
  
  ctx.reply(
    '–ú—ã –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å—Ç–æ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ:\n\n' +
    '1Ô∏è‚É£ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤—ã–µ–∑–¥ –∏–Ω–∂–µ–Ω–µ—Ä–∞\n' +
    '2Ô∏è‚É£ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–º–µ—Ç–∞\n' +
    '3Ô∏è‚É£ –î–æ–≥–æ–≤–æ—Ä —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω–æ–π\n' +
    '4Ô∏è‚É£ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è + –∞–≤—Ç–æ—Ä—Å–∫–∏–π –Ω–∞–¥–∑–æ—Ä\n' +
    '5Ô∏è‚É£ –°–¥–∞—á–∞ –æ–±—ä–µ–∫—Ç–∞ –∏ –≥–∞—Ä–∞–Ω—Ç–∏—è\n\n' +
    'NEMO Moscow ‚Äî —Ä–µ–º–æ–Ω—Ç –ø–æ–¥ –∫–ª—é—á, –Ω–∞–¥–∑–æ—Ä –∏ –¥–∏–∑–∞–π–Ω —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π.',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚òéÔ∏è –û–±—Å—É–¥–∏—Ç—å —Å–≤–æ–π –æ–±—ä–µ–∫—Ç', callback_data: 'leave_request' }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]
        ]
      }
    }
  );
}



export async function handleLeaveRequest(ctx: Context) {
  await setFlowState(ctx.from!.id, "lead:name");
  await clearLeadData(ctx.from!.id);
  if ("answerCbQuery" in ctx) await (ctx as any).answerCbQuery();
  await (ctx as any).reply(
    "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.\n\nüë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
  );
}

export async function handleReferral(ctx: Context) {
  const user = (ctx as any).user;
  if (!user) return;

  const referralCode = await storage.getUserReferralCode(user.id);
  const referralLink = `https://t.me/${process.env.BOT_USERNAME || 'nemo_moscow_bot'}?start=ref_${referralCode}`;
  
  // Get referral stats
  // const referralStats = await storage.getReferralStats(user.id);
  const referralStats = { totalReferrals: 0, bonusesGranted: 0 }; // Temporary mock

  ctx.reply(
    'üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\n' +
    `üîó –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n${referralLink}\n\n` +
    'üéÅ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–ø–∏—à–µ—Ç—Å—è –∏ –ø–æ–ø—Ä–æ–±—É–µ—Ç –±–æ—Ç–∞ ‚Äî +1 –ø–æ–ø—ã—Ç–∫–∞.\n\n' +
    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
    `‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${referralStats.totalReferrals}\n` +
    `‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: ${referralStats.bonusesGranted}\n\n` +
    'NEMO Moscow ‚Äî —Ä–µ–º–æ–Ω—Ç –ø–æ–¥ –∫–ª—é—á, –Ω–∞–¥–∑–æ—Ä –∏ –¥–∏–∑–∞–π–Ω —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π.',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]
        ]
      }
    }
  );
}

function validateAndNormalizeRuPhone(input: string): string | null {
  const raw = input.trim();

  // –í–∞—Ä–∏–∞–Ω—Ç 1: +79XXXXXXXXX
  if (/^\+79\d{9}$/.test(raw)) return raw;

  // –í–∞—Ä–∏–∞–Ω—Ç 2: 89XXXXXXXXX  -> –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ +79XXXXXXXXX
  const digits = raw.replace(/\D/g, "");
  if (/^89\d{9}$/.test(digits)) return `+7${digits.slice(1)}`;

  return null;
}

export async function handleLimitsCheck(ctx: Context) {
  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }
  
  const user = (ctx as any).user;
  if (!user) return;

  const [inspectorRequests, designerRequests] = await Promise.all([
    storage.getUserWeeklyRequests(user.id, 'inspector'),
    storage.getUserWeeklyRequests(user.id, 'designer')
  ]);

  const baseLimit = 10;
  const totalLimit = baseLimit + user.totalPurchasedRequests;
  
  ctx.reply(
    'üìä –í–∞—à–∏ –ª–∏–º–∏—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n' +
    `üëÄ –ò–ò-–¢–µ—Ö–Ω–∞–¥–∑–æ—Ä: ${inspectorRequests}/${totalLimit}\n` +
    `üé® –ò–ò-–î–∏–∑–∞–π–Ω–µ—Ä: ${designerRequests}/${totalLimit}\n\n` +
    `üíé –ë–∞–∑–æ–≤—ã–π –ª–∏–º–∏—Ç: ${baseLimit}/–Ω–µ–¥–µ–ª—è\n` +
    `üõí –î–æ–∫—É–ø–ª–µ–Ω–æ: ${user.totalPurchasedRequests}\n\n` +
    '–õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫.\n\n' +
    'NEMO Moscow ‚Äî —Ä–µ–º–æ–Ω—Ç –ø–æ–¥ –∫–ª—é—á, –Ω–∞–¥–∑–æ—Ä –∏ –¥–∏–∑–∞–π–Ω —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π.',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí≥ –î–æ–∫—É–ø–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏', callback_data: 'buy_requests' }],
          [{ text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'referrals' }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]
        ]
      }
    }
  );
}

// Design quiz handlers
export async function handleStyleSelection(ctx: Context, style: string) {
  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }
  
  const user = (ctx as any).user;
  if (!user) return;

  await storage.setBotSetting(`design_quiz_${user.id}`, JSON.stringify({ style }));

  const styleNames: { [key: string]: string } = {
    minimalism: '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º',
    loft: '–õ–æ—Ñ—Ç', 
    classic: '–ö–ª–∞—Å—Å–∏–∫–∞',
    scandi: '–°–∫–∞–Ω–¥–∏'
  };

  ctx.reply(
    `‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: ${styleNames[style] || style}\n\n` +
    '‚ùì –ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ?',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–î–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å', callback_data: 'priority_durability' }],
          [{ text: '–£—é—Ç', callback_data: 'priority_comfort' }],
          [{ text: '–≠—Å—Ç–µ—Ç–∏–∫–∞', callback_data: 'priority_aesthetics' }],
          [{ text: '–°–∫–æ—Ä–æ—Å—Ç—å', callback_data: 'priority_speed' }]
        ]
      }
    }
  );
}

export async function handlePrioritySelection(ctx: Context, priority: string) {
  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }
  
  const user = (ctx as any).user;
  if (!user) return;

  const quizData = await storage.getBotSetting(`design_quiz_${user.id}`);
  const quiz = quizData ? JSON.parse(quizData) : {};
  quiz.priority = priority;
  
  await storage.setBotSetting(`design_quiz_${user.id}`, JSON.stringify(quiz));

  const priorityNames: { [key: string]: string } = {
    durability: '–î–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å',
    comfort: '–£—é—Ç',
    aesthetics: '–≠—Å—Ç–µ—Ç–∏–∫–∞',
    speed: '–°–∫–æ—Ä–æ—Å—Ç—å'
  };

  ctx.reply(
    `‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priorityNames[priority] || priority}\n\n` +
    '‚ùì –°–¥–µ–ª–∞—Ç—å –∞–∫—Ü–µ–Ω—Ç –Ω–∞:',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–û—Å–≤–µ—â–µ–Ω–∏–∏', callback_data: 'accent_lighting' }],
          [{ text: '–ú–µ–±–µ–ª–∏', callback_data: 'accent_furniture' }],
          [{ text: '–ú–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö', callback_data: 'accent_materials' }]
        ]
      }
    }
  );
}

export async function handleAccentSelection(ctx: Context, accent: string) {
  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }
  
  const user = (ctx as any).user;
  if (!user) return;

  const quizData = await storage.getBotSetting(`design_quiz_${user.id}`);
  const quiz = quizData ? JSON.parse(quizData) : {};
  quiz.accent = accent;
  
  await storage.setBotSetting(`design_quiz_${user.id}`, JSON.stringify(quiz));
  
  // Set agent state for photo upload
  await storage.setBotSetting(`agent_state_${user.id}`, JSON.stringify({ agent: 'designer' }));

  const accentNames: { [key: string]: string } = {
    lighting: '–û—Å–≤–µ—â–µ–Ω–∏–µ',
    furniture: '–ú–µ–±–µ–ª—å', 
    materials: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã'
  };

  ctx.reply(
    `‚úÖ –ê–∫—Ü–µ–Ω—Ç: ${accentNames[accent] || accent}\n\n` +
    'üì∏ –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç–∞.\n\n' +
    '–ò–ò-–î–∏–∑–∞–π–Ω–µ—Ä —É—á—Ç—ë—Ç –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é.',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]
        ]
      }
    }
  );
}

export async function handleBuyRequests(ctx: Context) {
  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }
  
  ctx.reply(
    'üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:\n\n' +
    'üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:\n' +
    '‚Ä¢ +3 –∑–∞–ø—Ä–æ—Å–∞ ‚Äî ‚ÇΩ299\n' +
    '‚Ä¢ +10 –∑–∞–ø—Ä–æ—Å–æ–≤ ‚Äî ‚ÇΩ799\n\n' +
    '–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–±–∞–≤—è—Ç—Å—è –∫ –≤–∞—à–µ–º—É –ª–∏–º–∏—Ç—É.\n\n' +
    'NEMO Moscow ‚Äî —Ä–µ–º–æ–Ω—Ç –ø–æ–¥ –∫–ª—é—á, –Ω–∞–¥–∑–æ—Ä –∏ –¥–∏–∑–∞–π–Ω —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π.',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: '+3 –∑–∞–ø—Ä–æ—Å–∞ - ‚ÇΩ299', callback_data: 'buy_requests_3' }],
          [{ text: '+10 –∑–∞–ø—Ä–æ—Å–æ–≤ - ‚ÇΩ799', callback_data: 'buy_requests_10' }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]
        ]
      }
    }
  );
}

export async function handleRenovationIncludes(ctx: Context) {
  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }
  
  ctx.reply(
    'üîß –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —Ä–µ–º–æ–Ω—Ç –ø–æ–¥ –∫–ª—é—á:\n\n' +
    '‚ñ´Ô∏è –ß–µ—Ä–Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã: –¥–µ–º–æ–Ω—Ç–∞–∂, —Å—Ç—è–∂–∫–∞, —à—Ç—É–∫–∞—Ç—É—Ä–∫–∞, —ç–ª–µ–∫—Ç—Ä–∏–∫–∞, —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞\n' +
    '‚ñ´Ô∏è –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã: —Ä–∞–∑–≤–æ–¥–∫–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –ø–æ –ø—Ä–æ–µ–∫—Ç—É\n' +
    '‚ñ´Ô∏è –û—Ç–¥–µ–ª–∫–∞: —Ñ–∏–Ω–∏—à–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –Ω–∞–ø–æ–ª—å–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è, –ø–æ–∫—Ä–∞—Å–∫–∞\n' +
    '‚ñ´Ô∏è –ú–µ–±–µ–ª—å: –ø–æ–¥–±–æ—Ä –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –¥–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç—É\n' +
    '‚ñ´Ô∏è –î–µ–∫–æ—Ä: —Ç–µ–∫—Å—Ç–∏–ª—å, –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã, –æ—Å–≤–µ—â–µ–Ω–∏–µ\n\n' +
    '–í—Å—ë ‚Äî —Å –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π –∏ –ø–æ –µ–¥–∏–Ω–æ–º—É –¥–æ–≥–æ–≤–æ—Ä—É.\n\n' +
    'NEMO Moscow ‚Äî —Ä–µ–º–æ–Ω—Ç –ø–æ–¥ –∫–ª—é—á, –Ω–∞–¥–∑–æ—Ä –∏ –¥–∏–∑–∞–π–Ω —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π.',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ö–∞–∫ –º—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ', callback_data: 'quality_control' }],
          [{ text: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞', callback_data: 'leave_request' }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]
        ]
      }
    }
  );
}

export async function handleQualityControl(ctx: Context) {
  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }
  
  ctx.reply(
    'üéØ –ö–∞–∫ –º—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ:\n\n' +
    '‚ñ´Ô∏è –ö–∞–∂–¥—ã–π —ç—Ç–∞–ø —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä-–Ω–∞–¥–∑–æ—Ä—â–∏–∫\n' +
    '‚ñ´Ô∏è –í—ã –≤–∏–¥–∏—Ç–µ —Ñ–æ—Ç–æ- –∏ –≤–∏–¥–µ–æ–æ—Ç—á—ë—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞\n' +
    '‚ñ´Ô∏è –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –ø—Ä–æ–∑—Ä–∞—á–Ω—ã ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–ª–∞—Ç\n' +
    '‚ñ´Ô∏è –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–µ–∫—Ç—É –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö\n' +
    '‚ñ´Ô∏è –ü—Ä–∏—ë–º–∫–∞ —Ä–∞–±–æ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞\n\n' +
    '–†–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å–ª—É–∂–∏—Ç –≥–æ–¥–∞–º–∏.\n\n' +
    'NEMO Moscow ‚Äî —Ä–µ–º–æ–Ω—Ç –ø–æ–¥ –∫–ª—é—á, –Ω–∞–¥–∑–æ—Ä –∏ –¥–∏–∑–∞–π–Ω —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π.',
    {
      reply_markup: {
        inline_keyboard: [
          // [{ text: '–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —Ä–µ–º–æ–Ω—Ç', callback_data: 'renovation_includes' }],
          [{ text: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞', callback_data: 'leave_request' }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]
        ]
      }
    }
  );
}

export async function handleConsultation(ctx: Context) {
  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }
  
  const user = (ctx as any).user;
  if (!user) return;

  ctx.reply(
    'üë®‚Äçüîß –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏–Ω–∂–µ–Ω–µ—Ä–∞\n\n' +
    '–ù–∞—à –∏–Ω–∂–µ–Ω–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∏ —Å–ø–æ—Å–æ–±–æ–≤ –∏—Ö —Ä–µ—à–µ–Ω–∏—è.\n\n' +
    '–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:\n' +
    '‚Ä¢ –í–∞—à–µ –∏–º—è\n' +
    '‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n' +
    '‚Ä¢ –ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞\n\n' +
    'üë§ –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]
        ]
      }
    }
  );

  // Set consultation form state
  await storage.setBotSetting(`consultation_form_${user.id}`, JSON.stringify({
    step: 'name',
    source: 'inspector_consultation'
  }));
}

export async function handleDiscussProject(ctx: Context) {
  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }
  
  const user = (ctx as any).user;
  if (!user) return;

  ctx.reply(
    'üé® –û–±—Å—É–¥–∏—Ç—å –¥–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç\n\n' +
    '–ù–∞—à –¥–∏–∑–∞–π–Ω–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ –≤–æ–ø–ª–æ—â–µ–Ω–∏—è –∏–¥–µ–∏.\n\n' +
    '–î–ª—è —Å–≤—è–∑–∏ –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:\n' +
    '‚Ä¢ –í–∞—à–µ –∏–º—è\n' +
    '‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n' +
    '‚Ä¢ –ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç—É\n\n' +
    'üë§ –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]
        ]
      }
    }
  );

  // Set project discussion form state
  await storage.setBotSetting(`consultation_form_${user.id}`, JSON.stringify({
    step: 'name',
    source: 'designer_consultation'
  }));
}

import { createDefect } from "./storage";
import { listDefectsPaged } from "./storage";
import type { Telegraf } from 'telegraf';

// --- –§–æ—Ç–æ—Ñ–∏–∫—Å–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ ---

// server/botHandlers.ts

const draftKeyFor = (userId: number | string) => `defect_draft_${userId}`;

// –°–±—Ä–æ—Å –º–∞—Å—Ç–µ—Ä–æ–≤ (draft/after)
export async function handleDefReset(ctx: Context) {
  const uid = ctx.from!.id;
  await storage.setBotSetting(draftKeyFor(uid), "");
  await storage.setBotSetting(afterKeyFor(uid), "");
  await ctx.reply("‚úÖ –ú–∞—Å—Ç–µ—Ä —Å–±—Ä–æ—à–µ–Ω. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ).");
}

export async function handleDefectStart(ctx: Context) {
  const user = ctx.from!;
  const uid = ctx.from!.id;
  await storage.setBotSetting(`defect_draft_${uid}`, JSON.stringify({ step: "photo" }));
  await storage.setBotSetting(afterKeyFor(uid), "");
  // –í —Ä–µ–∂–∏–º–µ —Ñ–æ—Ç–æ—Ñ–∏–∫—Å–∞—Ü–∏–∏ –ò–ò-–∞–≥–µ–Ω—Ç–∞ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ
  await storage.setBotSetting(`agent_state_${uid}`, "");
  await ctx.reply("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–∞...");
}

export async function onDefectPhoto(ctx: Context, next: () => Promise<void>) {
  const userId = ctx.from!.id;
  const key = draftKeyFor(userId);

  const uid = ctx.from!.id;
  const agent = await storage.getBotSetting(`agent_state_${uid}`);
  if (agent) return next();

  // –µ—Å–ª–∏ –º–∞—Å—Ç–µ—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –≤—ã—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É
  const exists = await storage.getBotSetting(key);
  if (!exists) return next();

  const msg: any = ctx.message;
  const photo = msg?.photo?.slice(-1)[0];
  if (!photo) return next();

  const mgid: string | undefined = msg.media_group_id;
  const fileId = photo.file_id;

  await runWithUserLock(userId, async () => {
    // ---- 1) –ë–µ—Ä—ë–º –°–ê–ú–£–Æ –°–í–ï–ñ–£–Æ –≤–µ—Ä—Å–∏—é —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∏ –ú–ï–†–î–ñ–ò–ú —Ñ–æ—Ç–æ ----
    const freshRaw = await storage.getBotSetting(key);
    const draft = freshRaw ? JSON.parse(freshRaw) : { step: "photo" };

    draft.photos = Array.isArray(draft.photos) ? draft.photos : [];

    // –¥–µ–¥—É–ø –ø–æ file_id
    if (!draft.photos.some((p: any) => p.telegramFileId === fileId)) {
      draft.photos.push({ telegramFileId: fileId, type: "initial" });
    }

    // –æ—Ç–º–µ—Ç–∏–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞–¥—Ä–∞ (–¥–ª—è –¥–µ–±–∞—É–Ω—Å–∞)
    draft._lastPhotoAt = Date.now();

    if (mgid) draft.pendingAlbum = String(mgid);

    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫
    await storage.setBotSetting(key, JSON.stringify(draft));

    // ---- 2) –î–µ–±–∞—É–Ω—Å –≤–æ–ø—Ä–æ—Å–∞ "–û–±—ä–µ–∫—Ç?" ----
    // a) –ê–ª—å–±–æ–º: –∂–¥—ë–º 2500 –º—Å —Ç–∏—à–∏–Ω—ã
    if (mgid) {
      const tk = `${userId}:${mgid}`;
      const prevT = albumTimers.get(tk);
      if (prevT) clearTimeout(prevT);

      const t = setTimeout(async () => {
        albumTimers.delete(tk);
        const latestRaw = await storage.getBotSetting(key);
        if (!latestRaw) return;
        const latest = JSON.parse(latestRaw);
        const quietFor = Date.now() - (latest._lastPhotoAt ?? 0);

        if (latest.step === "photo" && latest.lastAsked !== "object" && quietFor >= 2500) {
          latest.step = "object";
          latest.lastAsked = "object";
          await storage.setBotSetting(key, JSON.stringify(latest));
          await ctx.reply("üèó –£–∫–∞–∂–∏—Ç–µ –æ–±—ä–µ–∫—Ç (–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–π–∫–∏/–ø—Ä–æ–µ–∫—Ç–∞).");
        }
      }, 2500);

      albumTimers.set(tk, t);
      return;
    }

    // b) –ü–∞—á–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ñ–æ—Ç–æ: –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –Ω–∞ 1200 –º—Å
    const prevS = singleTimers.get(userId);
    if (prevS) clearTimeout(prevS);

    const st = setTimeout(async () => {
      singleTimers.delete(userId);
      const latestRaw = await storage.getBotSetting(key);
      if (!latestRaw) return;
      const latest = JSON.parse(latestRaw);
      const quietFor = Date.now() - (latest._lastPhotoAt ?? 0);

      if (latest.step === "photo" && latest.lastAsked !== "object" && quietFor >= 1000) {
        latest.step = "object";
        latest.lastAsked = "object";
        await storage.setBotSetting(key, JSON.stringify(latest));
        await ctx.reply("üèó –£–∫–∞–∂–∏—Ç–µ –æ–±—ä–µ–∫—Ç (–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–π–∫–∏/–ø—Ä–æ–µ–∫—Ç–∞).");
      }
    }, 1200);

    singleTimers.set(userId, st);
  });
}


export async function onDefectText(ctx: Context) {
  const txt = (ctx.message as any)?.text as string | undefined;
  if (txt?.startsWith("/")) return; // –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  const key = draftKeyFor(ctx.from!.id);
  const raw = await storage.getBotSetting(key);
  if (!raw) {
    await ctx.reply("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ñ–∏–∫—Å–∞—Ü–∏—é –¥–µ—Ñ–µ–∫—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º 1 —Ñ–æ—Ç–æ üì∏");
    return;
  }

  const draft = JSON.parse(raw);
  const text = (ctx.message as any)?.text?.trim();
  if (!text) {
  try {
    const d = JSON.parse(raw);
    if (d.step === "object") {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–±—ä–µ–∫—Ç. –ü—Ä–∏–º–µ—Ä: ¬´–ñ–ö –õ–µ—Å–Ω–æ–π, –∫–æ—Ä–ø—É—Å 3¬ª");
    } else if (d.step === "floor") {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —ç—Ç–∞–∂ (—á–∏—Å–ª–æ –∏–ª–∏ —Å–µ–∫—Ü–∏—é). –ü—Ä–∏–º–µ—Ä: ¬´3¬ª –∏–ª–∏ ¬´–°–µ–∫—Ü–∏—è B, 5¬ª");
    } else if (d.step === "description") {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É. –ü—Ä–∏–º–µ—Ä: ¬´–¢—Ä–µ—â–∏–Ω–∞ –≤ —à—Ç—É–∫–∞—Ç—É—Ä–∫–µ –Ω–∞ –æ—Ç–∫–æ—Å–µ¬ª");
    } else {
      await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôÇ");
    }
  } catch {
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôÇ");
  }
  return;}

  if (draft.step === "object") {
    draft.object = text;
    draft.step = "floor";
    await ctx.reply("–≠—Ç–∞–∂?", { reply_markup: withEditButtons() as any });
  } else if (draft.step === "floor") {
    draft.floor = text;
    draft.step = "category";
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", {
      reply_markup: withEditButtons({
        inline_keyboard: [
          [{ text: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",     callback_data: "def_cat:architecture" }],
          [{ text: "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤",     callback_data: "def_cat:structural" }],
          [{ text: "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞",       callback_data: "def_cat:electrical" }],
          [{ text: "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞",      callback_data: "def_cat:plumbing" }],
          [{ text: "–û—Ç–¥–µ–ª–∫–∞",         callback_data: "def_cat:finishing" }],
          [{ text: "–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data: "def_cat:landscaping" }],
        ],
      }),
    });
  } else if (draft.step === "description") {
    draft.description = text;
    draft.step = "preview";
    await storage.setBotSetting(key, JSON.stringify(draft));
    await sendPreview(ctx, draft);
    return;
  }

  await storage.setBotSetting(key, JSON.stringify(draft));
}

export async function onDefCategory(ctx: Context) {
  if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
  const key = draftKeyFor(ctx.from!.id);
  const raw = await storage.getBotSetting(key);
  if (!raw) return;

  const draft = JSON.parse(raw);
  const data = (ctx.callbackQuery as any).data as string;
  draft.category = data.split(":")[1];
  draft.step = "severity";
  await storage.setBotSetting(key, JSON.stringify(draft));
  await ctx.editMessageReplyMarkup(undefined).catch(() => {});
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å:", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ö—Ä–∏—Ç–∏—á–Ω–æ",      callback_data: "def_sev:critical" }],
        [{ text: "–°—Ä–µ–¥–Ω–µ",        callback_data: "def_sev:medium" }],
        [{ text: "–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ", callback_data: "def_sev:low" }],
      ],
    },
  });
}

export async function onDefSeverity(ctx: Context) {
  if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
  const key = draftKeyFor(ctx.from!.id);
  const raw = await storage.getBotSetting(key);
  if (!raw) return;

  const draft = JSON.parse(raw);
  const data = (ctx.callbackQuery as any).data as string;
  draft.severity = data.split(":")[1];
  draft.step = "description";
  await storage.setBotSetting(key, JSON.stringify(draft));
  await ctx.editMessageReplyMarkup(undefined).catch(() => {});
  await ctx.reply("–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É (—Ç–µ–∫—Å—Ç–æ–º).", { reply_markup: withEditButtons() as any });
}

// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π
const saveLocks = new Set<number>(); // –ø–æ userId
const processedCb = new Set<string>(); // –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ callbackQuery.id

export async function onDefSave(ctx: Context) {
  if (ctx.callbackQuery) {
    // 1) –µ—Å–ª–∏ —ç—Ç–æ—Ç callback —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚Äî –≤—ã—Ö–æ–¥–∏–º
    const cbid = (ctx.callbackQuery as any).id as string;
    if (processedCb.has(cbid)) {
      await ctx.answerCbQuery().catch(() => {});
      return;
    }
    processedCb.add(cbid);
    await ctx.answerCbQuery().catch(() => {});
  }

  const uid = ctx.from!.id;

  // 2) –µ—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É —ç—Ç–æ–≥–æ —é–∑–µ—Ä–∞ ‚Äî –≤—ã—Ö–æ–¥–∏–º
  if (saveLocks.has(uid)) return;
  saveLocks.add(uid);

  try {
    const k = draftKeyFor(uid);
    const raw = await storage.getBotSetting(k);
    if (!raw) return;

    const draft = JSON.parse(raw);

    const defect = await createDefect({
      object: draft.object,
      floor: draft.floor,
      category: draft.category,
      severity: draft.severity,
      description: draft.description,
      createdByUserId: String(uid),
      photos: draft.photos,
    });

    // –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∏ –∞–≥–µ–Ω—Ç–∞
    await storage.setBotSetting(k, "");
    await storage.setBotSetting(`agent_state_${uid}`, "");

    const photoCount = Array.isArray(draft.photos) ? draft.photos.length : 0;
    await ctx.reply(
      `‚úÖ –î–µ—Ñ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\nID: #${defect.humanId}\n–°—Ç–∞—Ç—É—Å: ${defect.status}\n–§–æ—Ç–æ: ${photoCount} —à—Ç.`
    );
  } finally {
    saveLocks.delete(uid);
  }
}

export async function onDefCancel(ctx: Context) {
  if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
  const uid = ctx.from!.id;
  await storage.setBotSetting(draftKeyFor(uid), "");
  await storage.setBotSetting(`agent_state_${uid}`, "");
  await ctx.reply("–û—Ç–º–µ–Ω–µ–Ω–æ.");
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
function formatDraftPreview(draft: any): string {
  const obj   = (draft?.object ?? "").toString().trim() || "‚Äî";
  const floor = (draft?.floor ?? "").toString().trim() || "‚Äî";
  const cat   = (draft?.category ?? "").toString().trim() || "‚Äî";
  const sev   = (draft?.severity ?? "").toString().trim() || "‚Äî";
  const desc  = (draft?.description ?? "").toString().trim() || "‚Äî";
  const photos = Array.isArray(draft?.photos) ? draft.photos.length : 0;

  return (
    `üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n` +
    `–û–±—ä–µ–∫—Ç: ${obj}\n` +
    `–≠—Ç–∞–∂: ${floor}\n` +
    `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${cat}\n` +
    `–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: ${sev}\n` +
    `–û–ø–∏—Å–∞–Ω–∏–µ: ${desc}\n` +
    `–§–æ—Ç–æ: ${photos} —à—Ç.`
  );
}

async function sendPreview(ctx: Context, draft: any) {
  try {
    const text =
      (typeof formatDraftPreview === "function"
        ? formatDraftPreview(draft)
        : `üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n` +
          `–û–±—ä–µ–∫—Ç: ${draft.object || "‚Äî"}\n` +
          `–≠—Ç–∞–∂: ${draft.floor || "‚Äî"}\n` +
          `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${draft.category || "‚Äî"}\n` +
          `–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: ${draft.severity || "‚Äî"}\n` +
          `–û–ø–∏—Å–∞–Ω–∏–µ: ${(draft.description || "‚Äî")}\n` +
          `–§–æ—Ç–æ: ${(Array.isArray(draft.photos) ? draft.photos.length : 0)} —à—Ç.`) +
      "\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å?";

    await ctx.reply(text, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data: "def_edit_menu" }],
          [{ text: "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data: "def_save" }],
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞",    callback_data: "def_cancel" }],
        ],
      },
    });

    // üëá –î–û–ë–ê–í–õ–ï–ù–û: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ
    const photosArr = Array.isArray(draft?.photos) ? draft.photos : [];
    if (photosArr.length > 0) {
      // Telegram —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –¥–æ 10 —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º–µ ‚Äî —à–ª—ë–º –ø–∞—á–∫–∞–º–∏ –ø–æ 10
      const MAX_MEDIA = 10;
      for (let i = 0; i < photosArr.length; i += MAX_MEDIA) {
        const chunk = photosArr.slice(i, i + MAX_MEDIA).map((p: any, idx: number) => {
          const media: any = {
            type: "photo",
            media: p.telegramFileId, // –º—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Ç—É—Ç: { telegramFileId }
          };
          // –ú–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä –ø–µ—Ä–≤–æ–π –ø–∞—á–∫–∏
          if (i === 0 && idx === 0) {
            media.caption = "üì∏ –§–æ—Ç–æ—Ñ–∏–∫—Å–∞—Ü–∏—è (–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä)";
          }
          return media;
        });

        try {
          await ctx.replyWithMediaGroup(chunk as any);
        } catch (e) {
          // –Ω–µ –ø–∞–¥–∞–µ–º –∏–∑-–∑–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞
          try { console.error("[sendPreview][mediaGroup]", e); } catch {}
        }
      }
    }

  } catch (err) {
    defReportError(ctx, "sendPreview", err);
  }
}



export async function showDefectCard(ctx: Context, humanIdRaw: string) {
  const humanId = humanIdRaw.toUpperCase().replace(/^#/, "");
  const data = await getDefectWithCountsByHumanId(humanId);  // –í–ê–ñ–ù–û: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è
  if (!data) {
    await ctx.reply(`‚ùå –ù–µ –Ω–∞—à—ë–ª ${humanId}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä.`);
    return;
  }
  const { defect: d, photos } = data;

  const text =
    `#${d.humanId} ¬∑ ${d.status}\n\n` +
    `–û–±—ä–µ–∫—Ç: ${d.object ?? "‚Äî"}\n` +
    `–≠—Ç–∞–∂: ${d.floor ?? "‚Äî"}\n` +
    `–ö–∞—Ç–µ–≥–æ—Ä–∏—è/–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: ${d.category} / ${d.severity}\n` +
    `–§–æ—Ç–æ: initial: ${photos.initial}, after: ${photos.after}\n`;

  const keyboard = {
    inline_keyboard: [
      // –¥–∞–ª—å—à–µ –æ—Å—Ç–∞–≤—å –∫–∞–∫ –±—ã–ª–æ
      [{ text: "üìé –î–æ–±–∞–≤–∏—Ç—å ¬´–ø–æ—Å–ª–µ¬ª", callback_data: `def_after:${humanId}` }],
      [
        { text: "üïí –ù–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å",  callback_data: `def_ctl_menu:${humanId}` },
        { text: "‚¨úÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ",  callback_data: `def_status:discovered:${humanId}` },
      ],
      [{ text: "‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω–æ", callback_data: `def_status:fixed:${humanId}` }],
    ],
  };

  await ctx.reply(text, { reply_markup: keyboard });
  return d;
}

// --- –ú–∏–Ω–∏-–∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ ---
function formatMiniCard(d: any) {
  const due = d.dueDate ? new Date(d.dueDate).toLocaleDateString("ru-RU") : "‚Äî";
  const statusEmoji =
    d.status === "on_control" ? "üïí" :
    d.status === "discovered" ? "üü°" :
    d.status === "fixed" ? "‚úÖ" : "‚Ä¢";

  return `${statusEmoji} #${d.humanId} ¬∑ ${d.status}\n` +
         `–û–±—ä–µ–∫—Ç: ${d.object}\n` +
         (d.floor ? `–≠—Ç–∞–∂: ${d.floor}\n` : "") +
         `–ö–∞—Ç–µ–≥–æ—Ä–∏—è/–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: ${d.category} / ${d.severity}\n` +
         `–°—Ä–æ–∫: ${due}`;
}

function miniCardKeyboard(humanId: string) {
  return {
    inline_keyboard: [
      [
        { text: "‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω–æ", callback_data: `def_set_fixed:${humanId}` },
        { text: "+1 –¥–µ–Ω—å",     callback_data: `def_due_p1:${humanId}` },
        { text: "+3 –¥–Ω—è",      callback_data: `def_due_p3:${humanId}` },
      ],
      [
        { text: "üóì –°–≤–æ—è –¥–∞—Ç–∞",      callback_data: `def_due_custom:${humanId}` },
        { text: "üßπ –°–Ω—è—Ç—å —Å –∫–æ–Ω—Ç—Ä–æ–ª—è", callback_data: `def_ctl_cancel:${humanId}` },
      ],
      [
        { text: "üîé –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data: `def_open:${humanId}` },
      ],
    ],
  } as const;
}

type MyListKind = "overdue" | "today" | "future" | "all" | "overdue_all";

export async function sendDefectsList(ctx: Context, kind: MyListKind, page = 0, assignee?: string) {
  const uid = assignee ?? String(ctx.from!.id);
  const PAGE = 5;
  const now = new Date();
  const todayEnd = new Date(); todayEnd.setHours(23,59,59,0);

  let opts: any = { assigneeId: uid, limit: PAGE, offset: page * PAGE, order: "due" };

  if (kind === "overdue") {
    opts.status = ["on_control"]; opts.dueBefore = now;
  } else if (kind === "today") {
    opts.status = ["on_control"]; opts.dueAfter = new Date(); opts.dueBefore = todayEnd;
  } else if (kind === "future") {
    opts.status = ["on_control"]; opts.dueAfter = new Date(todayEnd.getTime() + 1);
  } else if (kind === "all") {
    opts.status = ["on_control"];
  } else if (kind === "overdue_all") {
    opts = { limit: PAGE, offset: page * PAGE, order: "due", status: ["on_control"], dueBefore: now };
    delete opts.assigneeId;
  }

  const { rows, total } = await storage.listDefects(opts);

  const title =
    kind === "overdue" ? "‚è∞ –ú–æ–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ" :
    kind === "today"   ? "üü° –ù–∞ —Å–µ–≥–æ–¥–Ω—è" :
    kind === "future"  ? "üóì –ù–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ (–±—É–¥—É—â–µ–µ)" :
    kind === "overdue_all" ? "‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ (–≤—Å–µ)" :
    "–ù–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ";

  if (rows.length === 0) {
    await ctx.reply(`${title}: –ø—É—Å—Ç–æ.`);
    return;
  }

  for (const d of rows) {
    await ctx.reply(formatMiniCard(d), { reply_markup: miniCardKeyboard(d.humanId) as any });
  }

  const pages = Math.ceil(total / PAGE);
  if (pages > 1) {
    const kb = {
      inline_keyboard: [[
        ...(page > 0 ? [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `list:${kind}:${page - 1}` }] : []),
        ...(page < pages - 1 ? [{ text: "–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data: `list:${kind}:${page + 1}` }] : []),
      ]],
    } as const;
    await ctx.reply(`${title}: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1}/${pages}`, { reply_markup: kb as any });
  }
}

// --- –ú–∞—Å—Ç–µ—Ä ¬´–ù–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å¬ª ---
export async function controlMenu(ctx: Context) {
  if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
  const humanId = (ctx.callbackQuery as any).data.split(":")[1];
  const uid = ctx.from!.id;

  await storage.setBotSetting(controlKeyFor(uid), JSON.stringify({ humanId }));

  await ctx.reply(
    "–ö—Ç–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π?",
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üë§ –Ø",        callback_data: `def_assign_me:${humanId}` }],
          [{ text: "‚úçÔ∏è –£–∫–∞–∑–∞—Ç—å‚Ä¶", callback_data: `def_assign_enter:${humanId}` }],
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞",   callback_data: `def_ctl_cancel:${humanId}` }],
        ],
      },
    }
  );
}

async function sendAllDefectPhotos(ctx: Context, defectId: string, humanId: string) {
  const photos = await getDefectPhotosAll(defectId);
  const before = photos.filter(p => p.type === "initial" || p.type === "before");
  const after  = photos.filter(p => p.type === "after");

  // ¬´–î–æ¬ª
  if (before.length) {
    await ctx.reply(`–§–æ—Ç–æ ¬´–¥–æ¬ª –¥–ª—è #${humanId} (${before.length} —à—Ç.)`);
    for (const pack of chunk(before, 10)) {
      const media = pack.map((p, i) => ({
        type: "photo",
        media: p.telegramFileId,
        caption: i === 0 ? `#${humanId} ¬∑ –î–û (${before.length})` : undefined,
      })) as any[];
      await ctx.replyWithMediaGroup(media);
    }
  }

  // ¬´–ü–æ—Å–ª–µ¬ª
  if (after.length) {
    await ctx.reply(`–§–æ—Ç–æ ¬´–ø–æ—Å–ª–µ¬ª –¥–ª—è #${humanId} (${after.length} —à—Ç.)`);
    for (const pack of chunk(after, 10)) {
      const media = pack.map((p, i) => ({
        type: "photo",
        media: p.telegramFileId,
        caption: i === 0 ? `#${humanId} ¬∑ –ü–û–°–õ–ï (${after.length})` : undefined,
      })) as any[];
      await ctx.replyWithMediaGroup(media);
    }
  }
}

/** –¢–µ–∫—Å—Ç —Å #ID -> –∫–∞—Ä—Ç–æ—á–∫–∞ */
export async function handleIdQueryText(ctx: Context) {
  const text = (ctx.message as any)?.text as string | undefined;
  if (!text) return;
  const m = text.match(RE_ID);
  if (!m) return;

  const humanId = m[1].toUpperCase();
  // –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
  const defect = await showDefectCard(ctx, humanId); // –≤—ã–≤–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç
  const defectId = (defect as any)?.id; // id –±–µ—Ä—ë–º –∏–∑ –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞

  if (defectId) {
    await sendAllDefectPhotos(ctx, defectId, humanId);
  } else {
    await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ—Ñ–µ–∫—Ç–∞.");
  }

  // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≤–∫–ª—é—á–∞—Ç—å —Ä–µ–∂–∏–º ¬´–ø–æ—Å–ª–µ¬ª –∫–∞–∫ —Ä–∞–Ω—å—à–µ ‚Äî –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –æ—Å—Ç–∞–≤—å:
  // await storage.setBotSetting(afterKeyFor(ctx.from!.id), JSON.stringify({ humanId }));
}

const afterKeyFor = (uid: number | string) => `after_draft_${uid}`;

export async function startAddAfter(ctx: Context) {
  if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
  const humanId = (ctx.callbackQuery as any).data.split(":")[1];
  await storage.setBotSetting(afterKeyFor(ctx.from!.id), JSON.stringify({ humanId }));
  await ctx.reply(`–û–∫. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ ¬´–ø–æ—Å–ª–µ¬ª –¥–ª—è #${humanId}.`);
}

/** –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ "–ø–æ—Å–ª–µ" (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É –≤ –ë–î) */
export async function onAfterPhoto(ctx: Context, next: () => Promise<void>) {
  const uid = ctx.from!.id;
  const key = afterKeyFor(uid);
  const raw = await storage.getBotSetting(key);

  const user = ctx.from!;
  // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ò–ò-—Ä–µ–∂–∏–º, —á—Ç–æ–±—ã —Ñ–æ—Ç–æ –ø–æ—à–ª–æ –≤ –º–∞—Å—Ç–µ—Ä
  await storage.setBotSetting(`agent_state_${user.id}`, "");

  const agent = await storage.getBotSetting(`agent_state_${uid}`);
  if (agent) return next();

  // –µ—Å–ª–∏ —Ä–µ–∂–∏–º "–ø–æ—Å–ª–µ" –Ω–µ –≤–∫–ª—é—á–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ç–æ –¥–∞–ª—å—à–µ (–∫ –º–∞—Å—Ç–µ—Ä—É initial)
  if (!raw) return next();

  const { humanId } = JSON.parse(raw) as { humanId: string };
  const msg: any = ctx.message;
  const photo = msg?.photo?.slice(-1)[0];
  if (!photo) return next();

  const defect = await getDefectByHumanId(humanId);
  if (!defect) {
    await ctx.reply(`‚ùå –ù–µ –Ω–∞—à—ë–ª #${humanId}. –û—Ç–º–µ–Ω—è—é.`);
    await storage.setBotSetting(key, "");
    return;                 // –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ ‚Äî –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º
  }

  await addDefectPhotosBulk({
    defectId: defect.id,
    type: "after",
    telegramFileIds: [photo.file_id],
    createdByUserId: String(uid),
  });

  await ctx.reply(`üìé –î–æ–±–∞–≤–∏–ª 1 —Ñ–æ—Ç–æ ¬´–ø–æ—Å–ª–µ¬ª –∫ #${humanId}. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω–æ¬ª.`);
  // –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ ‚Äî –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º
}

export async function setStatusControl(ctx: Context) {
  if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
  const humanId = (ctx.callbackQuery as any).data.split(":")[1];
  const res = await updateDefectStatusByHumanId({ humanId, to: "on_control", actorUserId: String(ctx.from!.id) });
  if (!res.ok) return ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å (${res.reason}).`);
  await ctx.reply(`üïí #${humanId} —Ç–µ–ø–µ—Ä—å ¬´–ù–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ¬ª.`);
  await showDefectCard(ctx, humanId);
}

export async function setStatusDiscovered(ctx: Context) {
  if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
  const humanId = (ctx.callbackQuery as any).data.split(":")[1];
  const res = await updateDefectStatusByHumanId({ humanId, to: "discovered", actorUserId: String(ctx.from!.id) });
  if (!res.ok) return ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å (${res.reason}).`);
  await ctx.reply(`‚Ü©Ô∏è #${humanId} –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ ¬´–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ¬ª.`);
  await showDefectCard(ctx, humanId);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω–æ"
export async function setStatusFixed(ctx: Context) {
  // –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª–∏ "—á–∞—Å–∏–∫–∏"
  if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});

  // –∏–∑ callback_data –≤–∏–¥–∞ "def_set_fixed:D-000123" –¥–æ—Å—Ç–∞—ë–º humanId
  const humanId = (ctx.callbackQuery as any)?.data.split(":")[1];
  if (!humanId) return;

  const uid = ctx.from!.id;
  const afterKey = afterKeyFor(uid);

  // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è "–ø–æ—Å–ª–µ".
  // –ï—Å–ª–∏ —Ä–µ–∂–∏–º–∞ –Ω–µ—Ç ‚Äî –≤–∫–ª—é—á–∏–º –µ–≥–æ –∏ –ø–æ–ø—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ.
  const afterRaw = await storage.getBotSetting(afterKey);
  if (!afterRaw) {
    await storage.setBotSetting(afterKey, JSON.stringify({ humanId }));
    await ctx.reply("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ ¬´–ø–æ—Å–ª–µ¬ª (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ó–∞—Ç–µ–º —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω–æ¬ª.");
    return;
  } else {
    // –ï—Å–ª–∏ —Ä–µ–∂–∏–º –µ—Å—Ç—å, –Ω–æ –∫ –¥—Ä—É–≥–æ–º—É –¥–µ—Ñ–µ–∫—Ç—É ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏–º –Ω–∞ —Ç–µ–∫—É—â–∏–π
    const st = JSON.parse(afterRaw) as { humanId?: string; count?: number };
    if (st.humanId !== humanId) {
      await storage.setBotSetting(afterKey, JSON.stringify({ humanId }));
      await ctx.reply("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ ¬´–ø–æ—Å–ª–µ¬ª (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ) –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω–æ¬ª.");
      return;
    }
  }

  // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ fixed, —Ç—Ä–µ–±—É—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ "–ø–æ—Å–ª–µ"
  const res = await updateDefectStatusByHumanId({
    humanId,
    to: "fixed",
    actorUserId: String(uid),
    requireAfter: true,
  });

  if (res.ok) {
    // ‚úÖ –ü—Ä–∞–≤–∫–∞: –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –æ—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º "after"
    await storage.setBotSetting(afterKey, ""); // ‚Üê —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º after

    await ctx.reply(`‚úÖ #${humanId}: —Å—Ç–∞—Ç—É—Å ¬´–£—Å—Ç—Ä–∞–Ω–µ–Ω–æ¬ª.`);
    await showDefectCard(ctx, humanId);
    return;
  }

  // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å ‚Äî –ø–æ–∫–∞–∂–µ–º –ø—Ä–∏—á–∏–Ω—É
  await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å #${humanId}: ${res.reason ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}.`);
}


export async function handleFixByCaption(
  ctx: Context,
  next: () => Promise<void>
) {
  const uid = ctx.from!.id;
  const user = ctx.from!;

  await storage.setBotSetting(`agent_state_${user.id}`, "");
  const agent = await storage.getBotSetting(`agent_state_${uid}`);
  if (agent) return next();

  const caption = (ctx.message as any)?.caption as string | undefined;
  if (!caption) return next();                        // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ

  // –Ω–µ –º–µ—à–∞–µ–º, –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω –º–∞—Å—Ç–µ—Ä –∏–ª–∏ —Ä–µ–∂–∏–º after
  const draft = await storage.getBotSetting(draftKeyFor(uid));
  const after = await storage.getBotSetting(afterKeyFor(uid));
  if (draft || after) return next();

  const m = caption.match(RE_FIXED_CAPTION);
  if (!m) return next();

  const humanId = m[2].toUpperCase();

  const msg: any = ctx.message;
  const photo = msg?.photo?.slice(-1)[0];
  if (!photo) return next();

  const defect = await getDefectByHumanId(humanId);
  if (!defect) {
    await ctx.reply(`‚ùå –ù–µ –Ω–∞—à—ë–ª ${humanId}.`);
    return;                                           // –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ ‚Äî –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º
  }

  await addDefectPhotosBulk({
    defectId: defect.id,
    type: "after",
    telegramFileIds: [photo.file_id],
    createdByUserId: String(uid),
  });

  const res = await updateDefectStatusByHumanId({
    humanId,
    to: "fixed",
    actorUserId: String(uid),
    requireAfter: true,
  });

  if (!res.ok) {
    await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å ${humanId} (${res.reason}).`);
    return;
  }

  await ctx.reply(`‚úÖ ${humanId}: —Ñ–æ—Ç–æ ¬´–ø–æ—Å–ª–µ¬ª –¥–æ–±–∞–≤–ª–µ–Ω–æ, —Å—Ç–∞—Ç—É—Å ¬´–£—Å—Ç—Ä–∞–Ω–µ–Ω–æ¬ª.`);
  // –∑–¥–µ—Å—å next() —É–∂–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º
}

export async function startControlWizard(ctx: Context) {
  if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
  const humanId = (ctx.callbackQuery as any).data.split(":")[1];

  // —Å–æ—Ö—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
  const uid = ctx.from!.id;
  const state = { humanId, step: "ask_assignee" as const };
  await storage.setBotSetting(controlKeyFor(uid), JSON.stringify(state));

  await ctx.reply(
    `–ö–æ–≥–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ #${humanId}?\n` +
    `–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @username / Telegram ID —á–∏—Å–ª–æ–º.`,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üë§ –Ø", callback_data: `def_ctl_me:${humanId}` }],
          [{ text: "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data: `def_ctl_enter:${humanId}` }],
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: `def_ctl_cancel:${humanId}` }],
        ],
      },
    }
  );
}

export async function controlAssignMe(ctx: Context) {
  if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
  const humanId = (ctx.callbackQuery as any).data.split(":")[1];
  const uid = ctx.from!.id;

  const state = { humanId, step: "ask_due" as const, assignedTo: String(uid) };
  await storage.setBotSetting(controlKeyFor(uid), JSON.stringify(state));

  await askDue(ctx, humanId);
}

export async function controlAssignEnter(ctx: Context) {
  if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
  const humanId = (ctx.callbackQuery as any).data.split(":")[1];
  const uid = ctx.from!.id;

  const state = { humanId, step: "wait_assignee_input" as const };
  await storage.setBotSetting(controlKeyFor(uid), JSON.stringify(state));

  await ctx.reply("–û–∫. –ü—Ä–∏—à–ª–∏—Ç–µ @username –∏–ª–∏ Telegram ID —á–∏—Å–ª–æ–º.");
}

export async function controlAssignCancel(ctx: Context) {
  if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
  const uid = ctx.from!.id;
  await storage.setBotSetting(controlKeyFor(uid), "");
  await ctx.reply("–û—Ç–º–µ–Ω–µ–Ω–æ.");
}

export async function onControlWizardText(ctx: Context, next: () => Promise<void>) {
  const uid = ctx.from!.id;
  const key = controlKeyFor(uid);
  const raw = await storage.getBotSetting(key);
  if (!raw) return next();

  const state = JSON.parse(raw);
  const text = (ctx.message as any)?.text?.trim();

  if (state.step === "wait_assignee_input") {
    if (!text) return;

    // –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    const assignedTo = text.startsWith("@") ? text : /^\d+$/.test(text) ? text : null;
    if (!assignedTo) {
      await ctx.reply("–ù—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å @username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.");
      return;
    }

    state.assignedTo = assignedTo;
    state.step = "ask_due";
    await storage.setBotSetting(key, JSON.stringify(state));

    await askDue(ctx, state.humanId);
    return;
  }

  if (state.step === "wait_due_input") {
  const m = text.match(/^(\d{2})\.(\d{2})\.(\d{4})$/);
  if (!m) {
    await ctx.reply("–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä 28.09.2025");
    return;
  }
  const [_, dd, mm, yyyy] = m;
  // 23:59:59 –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ ‚Üí –¥–∞–ª–µ–µ –≤ ISO (UTC)
  const dt = new Date(Number(yyyy), Number(mm) - 1, Number(dd), 23, 59, 59, 0);
  await finalizeControl(ctx, dt.toISOString());
  return;
  }


  // –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞—à —à–∞–≥ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
  return next();
}

export async function controlDueToday(ctx: Context) {
  if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
  await finalizeControl(ctx, toISODateLocal(0));
}

export async function controlDuePlus1(ctx: Context) {
  if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
  await finalizeControl(ctx, toISODateLocal(1));
}

export async function controlDuePlus3(ctx: Context) {
  if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
  await finalizeControl(ctx, toISODateLocal(3));
}

export async function controlDueCustom(ctx: Context) {
  if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
  const humanId = (ctx.callbackQuery as any).data.split(":")[1];
  const uid = ctx.from!.id;
  const key = controlKeyFor(uid);
  const raw = await storage.getBotSetting(key);
  if (!raw) return;

  const state = JSON.parse(raw);
  state.step = "wait_due_input";
  await storage.setBotSetting(key, JSON.stringify(state));

  await ctx.reply("–ü—Ä–∏—à–ª–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 28.09.2025).");
}

async function finalizeControl(ctx: Context, dueISO: string) {
  const uid = ctx.from!.id;
  const key = controlKeyFor(uid);
  const raw = await storage.getBotSetting(key);
  if (!raw) return;
  const state = JSON.parse(raw) as { humanId: string; assignedTo?: string };

  if (!state.assignedTo) {
    await ctx.reply("–ù–µ —É–∫–∞–∑–∞–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.");
    await storage.setBotSetting(key, "");
    return;
  }

  const humanId = state.humanId;
  const actor = String(uid);

  // 1) –Ω–∞–∑–Ω–∞—á–∏—Ç—å
  const a = await assignDefectByHumanId(humanId, state.assignedTo, actor);
  if (!a.ok) {
    await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å (${a.reason}).`);
    return;
  }

  // 2) —Å—Ä–æ–∫
  const s = await setDefectDueDateByHumanId(humanId, dueISO, actor);
  if (!s.ok) {
    await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ä–æ–∫ (${s.reason}).`);
    return;
  }

  // 3) —Å—Ç–∞—Ç—É—Å: –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ
  const u = await updateDefectStatusByHumanId({
    humanId,
    to: "on_control",
    actorUserId: actor,
  });
  if (!u.ok) {
    await ctx.reply(`‚ö†Ô∏è –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å (${u.reason}).`);
  }

  await storage.setBotSetting(key, ""); // –æ—á–∏—Å—Ç–∫–∞ –º–∞—Å—Ç–µ—Ä–∞

  // 4) —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const defect = await getDefectByHumanId(humanId);
  const assignee = state.assignedTo;
  const dueDate = new Date(dueISO);
  const dueStr = dueDate.toLocaleString("ru-RU", { day: "2-digit", month: "2-digit", year: "numeric" });

  await ctx.reply(
    `üïí #${humanId} –≤–∑—è—Ç –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å.\n` +
    `–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${assignee}\n` +
    `–°—Ä–æ–∫: ${dueStr}`
  );

  // DM –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É, –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–π TG ID
  if (/^\d+$/.test(assignee)) {
    try {
      await ctx.telegram.sendMessage(
        Number(assignee),
        `–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–µ—Ñ–µ–∫—Ç #${humanId}. –°—Ä–æ–∫: ${dueStr}`
      );
    } catch {}
  }

  // –£–≤–µ–¥–æ–º–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –¥–µ—Ñ–µ–∫—Ç–∞ (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω)
  if (defect?.createdByUserId && defect.createdByUserId !== actor) {
    try {
      await ctx.telegram.sendMessage(
        Number(defect.createdByUserId),
        `–í–∞—à –¥–µ—Ñ–µ–∫—Ç #${humanId} –≤–∑—è—Ç –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${assignee}, —Å—Ä–æ–∫: ${dueStr}`
      );
    } catch {}
  }

  // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
  await showDefectCard(ctx, humanId);
}

// ... –∑–¥–µ—Å—å —Ç–≤–æ–∏ —Ö–µ–ª–ø–µ—Ä—ã: formatMiniCard, miniCardKeyboard, sendDefectsList, showDefectCard

export function registerListCommands(bot: Telegraf<Context>) {
  // –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
  bot.action(/def_open:(.+)/, async (ctx) => {
    const humanId = (ctx.callbackQuery as any).data.split(":")[1];
    await ctx.answerCbQuery().catch(()=>{});
    await showDefectCard(ctx, humanId);
  });

  // –ø–∞–≥–∏–Ω–∞—Ü–∏—è
  bot.action(/list:(.+):(\d+)/, async (ctx) => {
    const [, kindRaw, pageRaw] = ((ctx.callbackQuery as any).data as string).match(/list:(.+):(\d+)/)!;
    await ctx.answerCbQuery().catch(()=>{});
    await sendDefectsList(ctx, kindRaw as any, Number(pageRaw));
  });

  // /my [today|overdue|future|all]
  bot.command("my", async (ctx) => {
    console.log("MY CMD from", ctx.from?.id, "text=", (ctx.message as any).text);
    const arg = (ctx.message as any).text.split(" ").slice(1).join(" ").trim().toLowerCase();
    const kind = (arg === "today" ? "today" :
                  arg === "overdue" ? "overdue" :
                  arg === "future" ? "future" : "all") as any;
    await sendDefectsList(ctx, kind, 0);
  });

  // –∞–ª–∏–∞—Å—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  bot.command("my_today",   async (ctx) => sendDefectsList(ctx, "today", 0));
  bot.command("my_overdue", async (ctx) => sendDefectsList(ctx, "overdue", 0));
  bot.command("my_future",  async (ctx) => sendDefectsList(ctx, "future", 0));

  bot.command("overdue",    async (ctx) => sendDefectsList(ctx, "overdue_all", 0));
  bot.command("oncontrol",  async (ctx) => sendDefectsList(ctx, "future", 0));

  console.log("‚úÖ list commands registered");
}

export async function handleListsMenu(ctx: Context) {
  if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});

  const kb = {
    inline_keyboard: [
      // –ú–æ–∏
      [{ text: "üë§ –ú–æ–∏ ‚Äî —Å–µ–≥–æ–¥–Ω—è",       callback_data: "list:today:0" }],
      [
        { text: "üë§ –ú–æ–∏ ‚Äî –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã",   callback_data: "list:overdue:0" },
        { text: "üë§ –ú–æ–∏ ‚Äî –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ",  callback_data: "list:future:0" },
      ],
      [{ text: "üë§ –ú–æ–∏ ‚Äî –≤—Å–µ",           callback_data: "list:all:0" }],

      // –í—Å–µ
      [
        { text: "üóÇ –í—Å–µ ‚Äî –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã",   callback_data: "list:overdue_all:0" },
        { text: "üóÇ –í—Å–µ ‚Äî –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ",  callback_data: "list:future:0" },
      ],

      [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",        callback_data: "start" }],
    ],
  } as const;

  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:", { reply_markup: kb as any });
}

// --- A2 helpers: edit buttons ---
function editButtonsInline() {
  return [
    [
      { text: "üß± –ò–∑–º–µ–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç", callback_data: "def_edit:object" },
      { text: "‚ÜïÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —ç—Ç–∞–∂",  callback_data: "def_edit:floor"  },
    ]
  ];
}

// –í–º–µ—Ä–∂–∏—Ç—å –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ª—é–±–æ–µ inline-–º–µ–Ω—é
function withEditButtons(kb?: any) {
  const base = kb?.inline_keyboard ? kb.inline_keyboard : (Array.isArray(kb) ? kb : []);
  return { inline_keyboard: [...base, ...editButtonsInline()] };
}

export async function onDefEdit(ctx: Context) {
  try {
    if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
    const uid = ctx.from!.id;
    const key = `defect_draft_${uid}`;

    const raw = await storage.getBotSetting(key);
    if (!raw) { await ctx.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –º–∞—Å—Ç–µ—Ä: –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–∞ üì∏"); return; }

    const draft = JSON.parse(raw);
    const data = (ctx.callbackQuery as any)?.data as string;
    const target = data?.split(":")[1];

    if (target === "object") {
      draft.step = "object";
      await storage.setBotSetting(key, JSON.stringify(draft));
      await ctx.reply("üß± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç:");
    } else if (target === "floor") {
      draft.step = "floor";
      await storage.setBotSetting(key, JSON.stringify(draft));
      await ctx.reply("‚ÜïÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —ç—Ç–∞–∂:");
    } else if (target === "description") {
      draft.step = "description";
      await storage.setBotSetting(key, JSON.stringify(draft));
      await ctx.reply("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:");
    } else if (target === "photos") {
      draft.step = "photo";
      await storage.setBotSetting(key, JSON.stringify(draft));
      await ctx.reply(
        "üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å —Ñ–æ—Ç–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ¬ª.",
        { reply_markup: { inline_keyboard: [[{ text: "üóë –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ", callback_data: "def_photos_clear" }]] } }
      );
    } else {
      await ctx.reply("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å: –æ–±—ä–µ–∫—Ç, —ç—Ç–∞–∂, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ?");
    }
  } catch (err) {
    defReportError(ctx, "onDefEdit", err);
  }
}

// –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π —á–µ—Ä–Ω–æ–≤–∏–∫–∞
export async function onDefEditMenu(ctx: Context) {
  try {
    if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
    const uid = ctx.from!.id;
    const key = `defect_draft_${uid}`;

    const raw = await storage.getBotSetting(key);
    if (!raw) {
      await ctx.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –º–∞—Å—Ç–µ—Ä: –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–∞ üì∏");
      return;
    }

    await ctx.reply("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üß± –û–±—ä–µ–∫—Ç",   callback_data: "def_edit:object" },
            { text: "‚ÜïÔ∏è –≠—Ç–∞–∂",     callback_data: "def_edit:floor"  },
          ],
          [{ text: "üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data: "def_edit:description" }],
          [{ text: "üì∑ –§–æ—Ç–æ",     callback_data: "def_edit:photos" }],
          [{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É", callback_data: "def_preview_back" }],
        ],
      },
    });
  } catch (err) {
    defReportError(ctx, "onDefEditMenu", err);
  }
}


// –û—á–∏—Å—Ç–∏—Ç—å –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ
export async function onDefPhotosClear(ctx: Context) {
  try {
    if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
    const uid = ctx.from!.id;
    const key = `defect_draft_${uid}`;
    const raw = await storage.getBotSetting(key);
    if (!raw) { await ctx.reply("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."); return; }

    const draft = JSON.parse(raw);
    draft.photos = [];
    draft.step = "photo";
    await storage.setBotSetting(key, JSON.stringify(draft));
    await ctx.reply("üßπ –§–æ—Ç–æ –æ—á–∏—â–µ–Ω—ã. –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–∞ üì∏");
  } catch (err) {
    defReportError(ctx, "onDefPhotosClear", err);
  }
}

// –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ç–µ–∫—É—â–µ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
export async function onDefPreviewBack(ctx: Context) {
  try {
    if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
    const uid = ctx.from?.id;
    if (!uid) return;
    const key = `defect_draft_${uid}`;
    const raw = await storage.getBotSetting(key);
    if (!raw) { await ctx.reply("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."); return; }

    const draft = JSON.parse(raw);
    await sendPreview(ctx, draft);
  } catch (err) {
    defReportError(ctx, "onDefPreviewBack", err);
  }
}

// –ú–µ–Ω—é: —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ
export async function onDefCardEditMenu(ctx: Context) {
  try {
    if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
    const data = (ctx.callbackQuery as any).data as string; // def_edit_def:D-000123
    const humanId = data.split(":")[1];

    (ctx as any)._editingDefectId = humanId; // –Ω–∞ –≤—Å—è–∫–∏–π
    await storage.setBotSetting(`def_edit_meta_${ctx.from!.id}`, JSON.stringify({ humanId }));

    await ctx.reply(`–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ #${humanId}?`, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üß± –û–±—ä–µ–∫—Ç",   callback_data: `def_edit_field:object:${humanId}` },
            { text: "‚ÜïÔ∏è –≠—Ç–∞–∂",     callback_data: `def_edit_field:floor:${humanId}`  },
          ],
          [{ text: "üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data: `def_edit_field:description:${humanId}` }],
        ],
      },
    });
  } catch (err) {
    // –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º—Å—è –∫ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º –ª–æ–≥–≥–µ—Ä–∞–º
    try { console.error("[def-card-edit][menu]", err); } catch {}
  }
}

// –í—ã–±–æ—Ä –ø–æ–ª—è: –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
export async function onDefCardEditField(ctx: Context) {
  try {
    if (ctx.callbackQuery) await ctx.answerCbQuery().catch(() => {});
    const data = (ctx.callbackQuery as any).data as string; // def_edit_field:<field>:<ID>
    const parts = data.split(":"); // ["def_edit_field", "<field>", "<ID>"]
    const field = parts[1] as "object" | "floor" | "description";
    const humanId = parts[2];

    await storage.setBotSetting(`def_edit_wait_${ctx.from!.id}`, JSON.stringify({ humanId, field }));

    const prompt =
      field === "object" ? "üß± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç:" :
      field === "floor"  ? "‚ÜïÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —ç—Ç–∞–∂:" :
                           "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:";

    await ctx.reply(prompt);
  } catch (err) {
    try { console.error("[def-card-edit][field]", err); } catch {}
  }
}

// –ü—Ä–∏—à—ë–ª —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë –∑–∞–Ω–æ–≤–æ
export async function onDefCardEditText(ctx: Context, next: () => Promise<void>) {
  try {
    const msg: any = ctx.message;
    const text = msg?.text?.trim();
    if (!text) return next(); // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-—Ç–µ–∫—Å—Ç

    const uid = ctx.from!.id;
    const raw = await storage.getBotSetting(`def_edit_wait_${uid}`);
    if (!raw) return next(); // –Ω–µ –∂–¥—ë–º –≤–≤–æ–¥–∞ ‚Äî –ø—É—Å—Ç—å –¥—Ä—É–≥–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç

    // –°–±—Ä–æ—Å–∏–º "—Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è" –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–¥–≤–∏—Å–∞—Ç—å
    await storage.setBotSetting(`def_edit_wait_${uid}`, "");

    const { humanId, field } = JSON.parse(raw) as { humanId: string; field: "object"|"floor"|"description" };

    // ‚ö†Ô∏è –í–ê–ñ–ù–û: –∑–¥–µ—Å—å –Ω—É–∂–µ–Ω –∞–ø–¥–µ–π—Ç –≤ –ë–î. –ï—Å–ª–∏ –≤ —Ç–≤–æ—ë–º storage —É–∂–µ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ.
    // –ù–∏–∂–µ ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä; –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –≤—ã–∑–æ–≤:
    //   await updateDefectMetaByHumanId({ humanId, patch: { [field]: text }, actorUserId: String(uid) });
    //
    // –ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞ ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤—å —Ç–æ–Ω–∫–∏–π –∞–¥–∞–ø—Ç–µ—Ä –≤ storage, –ª–∏–±–æ –ø–æ–º–µ–Ω—è–π –∏–º—è –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ.

    if (typeof (storage as any).updateDefectMetaByHumanId === "function") {
      await (storage as any).updateDefectMetaByHumanId({ humanId, patch: { [field]: text }, actorUserId: String(uid) });
    } else if (typeof (storage as any).updateDefectFieldByHumanId === "function") {
      await (storage as any).updateDefectFieldByHumanId({ humanId, field, value: text, actorUserId: String(uid) });
    } else {
      // fallback: —Å–∫–∞–∂–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –º–µ—Ç–æ–¥–∞ –Ω–µ—Ç
      await ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ë–î. –î–æ–±–∞–≤—å—Ç–µ –≤ storage –º–µ—Ç–æ–¥ updateDefectMetaByHumanId(...) –∏–ª–∏ updateDefectFieldByHumanId(...).");
      return;
    }

    await ctx.reply("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ.");
    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–Ω–æ–≤–æ
    await showDefectCard(ctx, humanId);
  } catch (err) {
    try { console.error("[def-card-edit][text]", err); } catch {}
  }
}

export async function handleLeadFormText(ctx: Context, next: () => Promise<void>) {
  if (!ctx.from || !("message" in ctx) || !(ctx as any).message?.text) return next();
  const text = (ctx as any).message.text.trim();
  if (text.startsWith("/")) return next();

  const userId = ctx.from.id;
  const state = await getFlowState(userId);
  if (!state) return next();

  // –∏–º—è ‚Üí —Ç–µ–ª–µ—Ñ–æ–Ω
  if (state === "lead:name") {
    await setLeadData(userId, { name: text });
    await setFlowState(userId, "lead:phone");
    await (ctx as any).reply("üìû –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7 999 123-45-67):");
    return;
  }

  // —Ç–µ–ª–µ—Ñ–æ–Ω ‚Üí –®–∞–≥ 1 (—Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞)
  if (state === "lead:phone") {
    const phone = validateAndNormalizeRuPhone(text);
    if (!phone) {
      await (ctx as any).reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n" +
        "‚Ä¢ +79XXXXXXXXX (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567)\n" +
        "‚Ä¢ 89XXXXXXXXX (–Ω–∞–ø—Ä–∏–º–µ—Ä, 89991234567)"
      );
      return;
    }

    const data = await getLeadData(userId);
    data.phone = phone; // —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ +79...
    await setLeadData(userId, data);

    await setFlowState(userId, "quiz:kind");
    await (ctx as any).reply("üè¢ –®–∞–≥ 1. –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞:", kbKind());
    return;
  }

  // –∞–¥—Ä–µ—Å (—Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥) ‚Üí –®–∞–≥ 5.2 (—Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è)
  if (state === "quiz:address") {
    const v = text.slice(0, 200);
    const data = await getLeadData(userId);
    data.property = data.property || {};
    data.property.address = v;
    await setLeadData(userId, data);

    await setFlowState(userId, "quiz:space_type");
    await (ctx as any).reply("üè∑Ô∏è –£—Ç–æ—á–Ω–∏—Ç–µ —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è:", kbSpaceType());
    return;
  }

  // —Ç–æ—á–Ω–∞—è –ø–ª–æ—â–∞–¥—å (—Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥, —á–∏—Å–ª–æ)
  if (state === "quiz:area_exact") {
    const n = normalizeArea(text);
    if (n == null) {
      await (ctx as any).reply("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å —á–∏—Å–ª–æ–º (1‚Äì2000 –º¬≤). –ü—Ä–∏–º–µ—Ä: 86.5");
      return;
    }
    const data = await getLeadData(userId);
    data.property = data.property || {};
    data.property.area_exact = n;
    await setLeadData(userId, data);

    // –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ‚Äî –ø–∏—Å—å–º–æ
    await clearFlowState(userId);
    await clearLeadData(userId);
    await (ctx as any).reply("‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.");

    await sendLeadEmail({
        tgId: ctx.from!.id,
        username: ctx.from!.username,
        name: data.name,
        phone: data.phone,
        // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äì –º–æ–∂–µ—à—å –ø–æ–ª–æ–∂–∏—Ç—å —Å—é–¥–∞
        message: undefined,
        source: "telegram-consultation",
        quiz: {
          property: {
            kind: data.property?.kind,           // 'new_flat' | 'old_flat' | 'house' | 'commercial'
            area_band: data.property?.area_band, // 'lt50' | '50_100' | 'gt100'
            address: data.property?.address,     // —Å—Ç—Ä–æ–∫–∞ –∞–¥—Ä–µ—Å–∞
            space_type: data.property?.space_type, // 'apartment' | 'office' | 'retail' | 'shop' | 'other'
            area_exact: data.property?.area_exact as number | undefined, // —á–∏—Å–ª–æ
          },
          design_project: data.design_project,     // 'have' | 'none' | 'need'
          renovation: { type: data.renovation?.type }, // 'rough' | 'cosmetic' | 'designer' | 'capital'
        },
    });

    return;
  }

  // –Ω–∞ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π state ‚Äî –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–π —Å–±—Ä–æ—Å
  await clearFlowState(userId);
  await clearLeadData(userId);
  await (ctx as any).reply("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞: –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª –µ—â—ë —Ä–∞–∑ üôå");
}

// –®–∞–≥ 1: —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
export async function onQuizKind(ctx: Context) {
  const userId = ctx.from!.id;
  const kind = (ctx as any).match?.[1]; // new_flat | old_flat | house | commercial
  const data = await getLeadData(userId);
  data.property = data.property || {};
  data.property.kind = kind;
  await setLeadData(userId, data);

  await setFlowState(userId, "quiz:area_band");
  await (ctx as any).answerCbQuery();
  await (ctx as any).editMessageReplyMarkup(); // —É–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
  await (ctx as any).reply("üìê –®–∞–≥ 2. –ü–ª–æ—â–∞–¥—å:", kbAreaBand());
}

// –®–∞–≥ 2: –¥–∏–∞–ø–∞–∑–æ–Ω –ø–ª–æ—â–∞–¥–∏
export async function onQuizAreaBand(ctx: Context) {
  const userId = ctx.from!.id;
  const band = (ctx as any).match?.[1]; // lt50 | 50_100 | gt100
  const data = await getLeadData(userId);
  data.property = data.property || {};
  data.property.area_band = band;
  await setLeadData(userId, data);

  await setFlowState(userId, "quiz:design");
  await (ctx as any).answerCbQuery();
  await (ctx as any).editMessageReplyMarkup();
  await (ctx as any).reply("üß© –®–∞–≥ 3. –î–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç:", kbDesign());
}

// –®–∞–≥ 3: –¥–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç
export async function onQuizDesign(ctx: Context) {
  const userId = ctx.from!.id;
  const design = (ctx as any).match?.[1]; // have | none | need
  const data = await getLeadData(userId);
  data.design_project = design;
  await setLeadData(userId, data);

  await setFlowState(userId, "quiz:renovation_type");
  await (ctx as any).answerCbQuery();
  await (ctx as any).editMessageReplyMarkup();
  await (ctx as any).reply("üîß –®–∞–≥ 4. –¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞:", kbRenovation());
}

// –®–∞–≥ 4: —Ç–∏–ø —Ä–µ–º–æ–Ω—Ç–∞
export async function onQuizRenovationType(ctx: Context) {
  const userId = ctx.from!.id;
  const rtype = (ctx as any).match?.[1]; // rough | cosmetic | designer | capital
  const data = await getLeadData(userId);
  data.renovation = data.renovation || {};
  data.renovation.type = rtype;
  await setLeadData(userId, data);

  await setFlowState(userId, "quiz:address");
  await (ctx as any).answerCbQuery();
  await (ctx as any).editMessageReplyMarkup();
  await (ctx as any).reply("üìç –®–∞–≥ 5.1 ‚Äî –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–æ—Ä–ø—É—Å, –∫–≤–∞—Ä—Ç–∏—Ä–∞, —Ç–æ—Ä–≥–æ–≤–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ, –æ—Ñ–∏—Å, –º–∞–≥–∞–∑–∏–Ω):");
}

// –®–∞–≥ 5.2: —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è
export async function onQuizSpaceType(ctx: Context) {
  const userId = ctx.from!.id;
  const space = (ctx as any).match?.[1]; // apartment | office | retail | shop | other
  const data = await getLeadData(userId);
  data.property = data.property || {};
  data.property.space_type = space;
  await setLeadData(userId, data);

  await setFlowState(userId, "quiz:area_exact");
  await (ctx as any).answerCbQuery();
  await (ctx as any).editMessageReplyMarkup();
  await (ctx as any).reply("üìè –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é –ø–ª–æ—â–∞–¥—å (—á–∏—Å–ª–æ, –º¬≤):");
}


const kbKind = () =>
  Markup.inlineKeyboard([
    [Markup.button.callback("–ö–≤–∞—Ä—Ç–∏—Ä–∞ (–Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞)", "q_kind:new_flat")],
    [Markup.button.callback("–ö–≤–∞—Ä—Ç–∏—Ä–∞ (–≤—Ç–æ—Ä–∏—á–∫–∞)", "q_kind:old_flat")],
    [Markup.button.callback("–î–æ–º / –∫–æ—Ç—Ç–µ–¥–∂", "q_kind:house")],
    [Markup.button.callback("–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç", "q_kind:commercial")],
  ]);

const kbAreaBand = () =>
  Markup.inlineKeyboard([
    [Markup.button.callback("–¥–æ 50 –º¬≤", "q_area:lt50")],
    [Markup.button.callback("50‚Äì100 –º¬≤", "q_area:50_100")],
    [Markup.button.callback("100+ –º¬≤", "q_area:gt100")],
  ]);

const kbDesign = () =>
  Markup.inlineKeyboard([
    [Markup.button.callback("–ï—Å—Ç—å", "q_design:have")],
    [Markup.button.callback("–ù–µ—Ç", "q_design:none")],
    [Markup.button.callback("–ù—É–∂–µ–Ω", "q_design:need")],
  ]);

const kbRenovation = () =>
  Markup.inlineKeyboard([
    [Markup.button.callback("–ß–µ—Ä–Ω–æ–≤–æ–π", "q_rtype:rough")],
    [Markup.button.callback("–ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π", "q_rtype:cosmetic")],
    [Markup.button.callback("–î–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–π", "q_rtype:designer")],
    [Markup.button.callback("–ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π", "q_rtype:capital")],
  ]);

const kbSpaceType = () =>
  Markup.inlineKeyboard([
    [Markup.button.callback("–∫–≤–∞—Ä—Ç–∏—Ä–∞", "q_space:apartment")],
    [Markup.button.callback("–æ—Ñ–∏—Å", "q_space:office")],
    [Markup.button.callback("—Ç–æ—Ä–≥–æ–≤–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ", "q_space:retail")],
    [Markup.button.callback("–º–∞–≥–∞–∑–∏–Ω", "q_space:shop")],
    [Markup.button.callback("–¥—Ä—É–≥–æ–µ", "q_space:other")],
  ]);

function normalizeArea(s: string): number | null {
  const n = Number(String(s).replace(",", ".").replace(/[^\d.]/g, ""));
  if (!isFinite(n)) return null;
  if (n < 1 || n > 2000) return null;
  return Math.round(n * 100) / 100;
}