// server/roleHandlers.ts
import type { Context } from "telegraf";
import { ADMINS, MANAGERS, isAdminTgId } from "./bootstrapAdmins";

function setToBulleted(set: Set<string>): string {
  const arr: string[] = [];
  set.forEach((v) => arr.push(`‚Ä¢ ${v}`));
  return arr.length ? arr.join("\n") : "‚Äî";
}

export function registerRoleCommands(bot: any) {
  bot.command("role", async (ctx: Context) => {
    const me = String(ctx.from?.id ?? "");
    const role = isAdminTgId(me) ? "admin" : (MANAGERS.has(me) ? "manager" : "user");
    return ctx.reply(`–í–∞—à–∞ —Ä–æ–ª—å: ${role}`);
  });

  bot.command("admins", async (ctx: Context) => {
    if (!isAdminTgId(String(ctx.from?.id ?? ""))) {
      return ctx.reply("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.");
    }
    const a = setToBulleted(ADMINS);
    const m = setToBulleted(MANAGERS);
    return ctx.reply(`üëë Admins:\n${a}\n\nüëî Managers:\n${m}`);
  });

  // –≥–ª—É—à–∏–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞–ª–∏
  bot.command(["promote", "demote"], (ctx: Context) =>
    ctx.reply("–í —ç—Ç–æ–π —Å–±–æ—Ä–∫–µ —Ä–æ–ª–∏ –∑–∞–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ ENV: ADMIN_TG_IDS, MANAGER_TG_IDS."),
  );
}
